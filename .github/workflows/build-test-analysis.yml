# This workflow will trigger on every push or pull request to the main branch. It will run on the ubuntu-latest environment and perform the following steps:
# 1. Check out the code from the repository.
# 2. Set up Java 17 on the runner.
# 3. Build the project using Maven.
# 4. Run the unit tests using Maven.
# 5. Cache the Maven repository to speed up builds.
# 6. Generate an HTML report of the test results using the JUnit Test Report action.


name: Build-Test-Analysis

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'maven'

      - name: Build with Maven
        run: mvn clean package

      - name: Test with Maven
        run: mvn test
        
      - name: Cache SonarQube packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
          
      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
          
      - name: Analyse with SonarQube
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: >
            mvn sonar:sonar -Dsonar.host.url=https://sonarcloud.io
            -Dsonar.organization=hassanonsori
            -Dsonar.projectKey=HassanOnsori_simple-java-project 
            -Dsonar.login=$SONAR_TOKEN
            
#       - name: JUnit Test Report
#         uses: EnricoMi/JUnit_Test_Report@v2
#         with:
#           path-to-test-report: target/surefire-reports/TEST-*.xml
